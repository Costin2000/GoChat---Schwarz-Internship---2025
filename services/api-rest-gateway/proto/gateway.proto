syntax = "proto3";

package gateway;
option go_package = "github.com/Costin2000/GoChat---Schwarz-Internship---2025/services/api-rest-gateway/proto;gateway";

import "google/api/annotations.proto";
import "services/auth/proto/auth.proto";
import "services/aggregator/proto/aggregator.proto";
import "services/user-base/proto/userbase.proto";
import "services/friend-request-base/proto/friendrequest.proto";
import "services/message-base/proto/message.proto";
import "services/conversation-base/proto/conversation.proto";

service GatewayService {
    rpc Ping(auth.Empty) returns (auth.Pong) {
        option (google.api.http) = {
            get: "/v1/ping"
        };
    }

    rpc Login(auth.LoginRequest) returns (auth.LoginResponse) {
        option (google.api.http) = {
            post: "/v1/auth/login"
            body: "*"
        };
    }

    rpc CreateUser(user_base.CreateUserRequest) returns (user_base.CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/user"
            body: "*"
        };
    }

    rpc CreateFriendRequest(friendrequest.CreateFriendRequestRequest) returns (friendrequest.CreateFriendRequestResponse) {
        option (google.api.http) = {
            post: "/v1/friend-request"
            body: "*"
        };
    }

    rpc UpdateFriendRequest(friendrequest.UpdateFriendRequestRequest) returns (friendrequest.UpdateFriendRequestResponse) {
        option (google.api.http) = {
            patch: "/v1/friend-request/{friend_request.id}"
            body: "*"
        };
    }

    rpc ListFriendRequests(friendrequest.ListFriendRequestsRequest) returns (friendrequest.ListFriendRequestsResponse) {
        option (google.api.http) = {
            post: "/v1/friend-requests"
            body: "*"
        };
    }

    rpc ListUsers(user_base.ListUsersRequest) returns (user_base.ListUsersResponse) {
      option (google.api.http) = {
          post: "/v1/users:list"
          body: "*"
        };
    }

    rpc FetchUserFriends(aggregator.FetchUserFriendsRequest) returns (aggregator.FetchUserFriendsResponse) {
        option (google.api.http) = {
            post: "/v1/friends"
            body: "*"
        };
    }

    rpc CreateMessage(message_base.CreateMessageRequest) returns (message_base.CreateMessageResponse) {
      option (google.api.http) = {
        post: "/v1/message"
        body: "*"
      };
    }

    rpc CreateConversation(conversation.CreateConversationRequest) returns (conversation.CreateConversationResponse) {
      option (google.api.http) = {
        post: "/v1/conversation"
        body: "*"
      };
    }
}